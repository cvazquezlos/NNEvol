% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_best_nn.R
\name{get_best_nn}
\alias{get_best_nn}
\title{Calculates the best neural network architecture that fixes a given problem}
\usage{
get_best_nn(data, input, output, train = 0.7, validation = 0.2,
  test = 0.1, train_mode = 0, train_final_nn = FALSE, seed = 123,
  population_size = 30, generation_number = 30)
}
\arguments{
\item{data}{entry dataset}

\item{input}{number of inputs within the dataset}

\item{output}{number of outputs within the dataset}

\item{train}{proportion of data that is used to train each individual}

\item{validation}{proportion of data that is used to validate each individual}

\item{test}{proportion of data that is used to evaluate the final individual
if option train_final_nn is TRUE}

\item{train_mode}{mode of the training. 0: multi-class, 1: regression}

\item{train_final_nn}{if the final individual is evaluated or not}

\item{seed}{seed}

\item{population_size}{size of the population}

\item{generation_number}{number of generations}
}
\value{
List with both architecture and final loss
}
\description{
Calculates the best neural network architecture that fixes a given problem
}
\examples{
{
  raw_dataset <- keras::dataset_boston_housing(test_split = 0.30)
  data <- cbind(raw_dataset$test$x, raw_dataset$test$y)
  get_best_nn(data, 13, 1, train_mode = 1, population_size = 5,
              generation_number = 2)
}

}
